openapi: 3.0.3
info:
  title: Technical-Challenge-Nomus-Labs
  description: >-
    This project implements a Simple Social Network using Node.js and React.js,
    with basic functionalities of registration, login, user search, post
    publishing, follow and unfollow users, and a feed that shows the posts of
    followed users. In addition, features such as notifications and storage in a
    PostgreSQL database are included.
  contact:
    email: ramirogumma@hotmail.com
  version: 0.0.1
servers:
  - url: https://technical-challenge-nomus-labs.onrender.com
tags:
  - name: users
    description: Actions users
  - name: posts
    description: Access to Post
  - name: notifications
    description: Access to notifications
  - name: comments
    description: Access to comments
paths:
  /api/users/login:
    post:
      tags:
        - users
      summary: Loguin an user
      description: Returns a user with token authorization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of user.
                password:
                  type: string
                  description: Password of user.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: Error login
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
  /api/users/register:
    post:
      tags:
        - users
      summary: Register a new user
      description: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of user.
                password:
                  type: string
                  description: Password of user.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Register'
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
  /api/users/search/{username}:
    get:
      tags:
        - users
      summary: Find user by username
      description: Only receives a username and returns the record of the searched user.
      parameters:
        - name: username
          in: path
          description: Username to search a user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchUser'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/users/follow/{uid}:
    post:
      tags:
        - users
      summary: Fllow an user
      description: You can follow a user to be able to share information.
      parameters:
        - name: uid
          in: path
          description: User ID to follow.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/users/unfollow/{uid}:
    post:
      tags:
        - users
      summary: Unfllow an user
      description: You can Unfollow a user to no longer see the user's information.
      parameters:
        - name: uid
          in: path
          description: User ID to unfollow.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unfollow'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/users/updatePrivacy/{privacity}:
    post:
      tags:
        - users
      summary: Change your settings privacity
      description: You can change the privacy settings for the display of your data.
      parameters:
        - name: privacity
          in: path
          description: True to be public false to be private.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePrivacity'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/users/getUserPrivacy:
    get:
      tags:
        - users
      summary: Change yous settings privacity
      description: Can get your settings privacity.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrivacity'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/users/uploadProfilePicture:
    post:
      tags:
        - users
      summary: Upload a profile picture.
      description: You can change your profile photo.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadProfilePicture'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/users/getProfilePicture:
    get:
      tags:
        - users
      summary: Get profile picture.
      description: You can get a URL of your profile photo, valid for a 1hs.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfilePicture'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/posts/createPost:
    post:
      tags:
        - posts
      summary: Create a post.
      description: Create one post.
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePost'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/posts/editPost/{pid}:
    put:
      tags:
        - posts
      summary: Update a post.
      description: Create one post.
      parameters:
        - name: pid
          in: path
          description: The post ID to be updated
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedPost'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/posts/feed:
    get:
      tags:
        - posts
      summary: Update a post.
      description: Create one post.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeed'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Posts not found
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/posts/likePost/{pid}:
    post:
      tags:
        - posts
      summary: Like a post.
      description: Can like a post.
      parameters:
        - name: pid
          in: path
          description: The post ID to be liked
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liked'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Can not like post {ID} post
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/posts/unlikePost/{pid}:
    post:
      tags:
        - posts
      summary: Unlike a post.
      description: Can unlike a post.
      parameters:
        - name: pid
          in: path
          description: The post ID to be unliked
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unliked'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Can not unlike post {ID} post
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/posts/getPostLikes/${pid}:
    get:
      tags:
        - posts
      summary: All Like at one post.
      description: Can see how much likes have a post.
      parameters:
        - name: pid
          in: path
          description: The post ID to get likes.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostLiked'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: No have like the post {ID}
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/posts/deletePost/${pid}:
    delete:
      tags:
        - posts
      summary: Delete one post.
      description: Delete a post with their comments and likes.
      parameters:
        - name: pid
          in: path
          description: The post ID to delete.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePost'
        '400':
          description: Cant delete the post.
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/notifications/createNotification/{senderId}/{type}/{postId}/{commentId}:
    post:
      tags:
        - notifications
      summary: Create a notification.
      description: Create one notification.
      parameters:
        - name: senderId
          in: path
          description: The ID of the user to have the notification.
          required: true
          schema:
            type: integer
        - name: type
          in: path
          description: The event about the notification, can be Like, Message, etc.
          required: true
          schema:
            type: string
        - name: postId
          in: path
          description: The post ID about the notification.
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: If the notification is about a comment, here is the ID.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNotification'
        '204':
          description: Cant create the notification.
        '404':
          description: Missing fields to be completed
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/notifications/getUnreadNotifications:
    get:
      tags:
        - notifications
      summary: Get all notifications unread.
      description: Get all notifications unread.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUnreadNotifications'
        '204':
          description: No have notifications the user {ID}
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/notifications/markNotificationsAsRead:
    post:
      tags:
        - notifications
      summary: Mark all notification as read.
      description: Mark all notification as read.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarlAllNotificationAsRead'
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/comments/addComment/{pid}:
    post:
      tags:
        - comments
      summary: Add a comment.
      description: Create a comment and relationed with post_id.
      parameters:
        - name: pid
          in: path
          description: The ID of the post to add the comment.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Content of the comment.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddComment'
        '400':
          description: Cant add the comment.
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '500':
          description: Server Error
      security:
        - bearerAuth: []
  /api/comments/getPostComments/${pid}:
    get:
      tags:
        - comments
      summary: Add a comment.
      description: Create a comment and relationed with post_id.
      parameters:
        - name: pid
          in: path
          description: The ID of the post to add the comment.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComments'
        '204':
          description: Comments not founds.
        '401':
          description: Unauthorized access, token not provided or Token not valid.
        '500':
          description: Server Error
      security:
        - bearerAuth: []
components:
  schemas:
    SearchUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: Frank
    Login:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Logged
        data:
          type: object
          example:
            token: token JWT
            userId: 1
            username: Ramiro
    Register:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 201
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User successfully registered
        data:
          type: object
          example:
            id: 1
            username: Ramiro
    Follow:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Followed
        data:
          type: object
          example:
            id: 1
            user_id: 2
            target_user_id: 3
            created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    Unfollow:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Unfollowed
        data:
          type: object
          example:
            id: 1
            user_id: 2
            target_user_id: 3
            created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    ChangePrivacity:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User Frak is Privated
        data:
          type: object
          example:
            is_private: true
            username: Frank
    GetPrivacity:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User Frak is Public
        data:
          type: object
          example:
            is_private: false
            username: Frank
    UploadProfilePicture:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Photo uploaded
        data:
          type: object
          example:
            httpStatusCode: 200
            requestId: J77MKVMGDQTRTYC6
            extendedRequestId: >-
              vVal+mGsH19kFyFVQxVhNhhYVF9KBzzcou76ZvQKjiAWl2xgfHm6GzpVhVVz47JDXsneClz4BoWGwrC2KhtUoQ==
            attempts: 1
            totalRetryDelay: 0
    GetProfilePicture:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Photo uploaded
        data:
          type: object
          example: >-
            https://resto-sync-uploads.s3.us-east-1.amazonaws.com/1/profilePicture.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA2LXF5UODXXW27OQE%2F20240204%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240204T201615Z&X-Amz-Expires=3600&X-Amz-Signature=a814d8c2e8c5e58f4217d6186fc9f87f71f9b1a8509df3d9c6edc3adfb4ac3c1&X-Amz-SignedHeaders=host&x-id=GetObject
    CreatePost:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 201
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Posted
        data:
          type: object
          example:
            id: 1
            user_id: 2
            content: Content of post
            created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    UpdatedPost:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Post updated
        data:
          type: object
          example:
            id: 1
            user_id: 2
            content: Content of post updated
            created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    GetFeed:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Posts Found
        data:
          type: object
          example:
            pag: 1
            hasNextPage: true
            hasPreviousPage: false
            totalPages: 3
            totalDocuments: 30
            posts:
              - id: 1
                content: Content post
                created_at: Sun Feb 04 2024 16:29:06 GMT-0300
                username: Frank
    Liked:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Post 3 was liked
        data:
          type: object
          example:
            id: 1
            user_id: 2
            post_id: 3
            created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    Unliked:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Post 3 was unliked
        data:
          type: object
          example:
            id: 1
            user_id: 2
            post_id: 3
            created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    GetPostLiked:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Posts Found
        data:
          type: object
          example:
            - id: 1
              user_id: 2
              post_id: 3
              created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    DeletePost:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Post {ID} deleted.
    CreateNotification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          example: 2
        sender_id:
          type: integer
          example: 3
        type:
          type: string
          example: Like
        post_id:
          type: integer
          example: 4
    GetUnreadNotifications:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: The user 2 have 1 notifications
        data:
          type: object
          example:
            id: 1
            user_id: 2
            sender_id: 3
            type: Like
            post_id: 4
    MarlAllNotificationAsRead:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: The user 2 read 1 notifications
        data:
          type: object
          example:
            - id: 1
              user_id: 2
              sender_id: 3
              type: Like
              post_id: 4
    AddComment:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Comment added.
        data:
          type: object
          example:
            id: 1
            user_id: 2
            post_id: 3
            content: Content of the post.
            created_at: Sun Feb 04 2024 16:29:06 GMT-0300
    GetComments:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Comment added.
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              user_id:
                type: integer
                example: 2
              post_id:
                type: integer
                example: 3
              content:
                type: string
                example: Content of the post.
              created_at:
                type: string
                format: date-time
                example: '2024-02-04T16:29:06-03:00'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
